///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const std = @import("std");
const ng = @import("ng");

const ui = ng.ui;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const Text = @This();

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

memory: []u8,
text: []const u8,
allocated: bool,

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const Object = ng.ui.Object;
const Handle = ng.ui.Handle;
const LayoutConstraint = ng.ui.LayoutConstraint;

const log = ng.ui.log;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const FormatOptions = struct {
    unique: usize = 0,
};

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub noinline fn add_text(
    options: FormatOptions,
    comptime fmt: []const u8,
    args: anytype,
) void {
    const ident = ui.Ident{ .addr = @returnAddress(), .unique = options.unique };
    add_text_internal(options, fmt, args, ident);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

fn add_text_internal(
    options: FormatOptions,
    comptime fmt: []const u8,
    args: anytype,
    ident: ui.Ident,
) void {
    _ = options;
    const parent = ui.top_build_stack();

    if (ui.find_object(parent, ident)) |handle| {
        var object = ui.get(handle) catch return;
        object.active = true;
        object.shown = true;

        switch (object.data) {
            .text => |*text| {
                if (text.allocated) {
                    const count = std.fmt.count(fmt, args);

                    if (count <= text.memory.len) {
                        const slice = std.fmt.bufPrint(text.memory, fmt, args) catch return;

                        text.text = slice;
                    } else {
                        const block_count = (count + 7) & 0xFFFF_FFFF_FFFF_FFF8;
                        const buffer = ui.allocator.alloc(u8, block_count) catch return;
                        const slice = std.fmt.bufPrint(buffer, fmt, args) catch return;

                        ui.allocator.free(text.memory);
                        text.memory = buffer;
                        text.text = slice;
                    }
                }
            },
            else => {},
        }
    } else {
        const count = std.fmt.count(fmt, args);
        const block_count = (count + 7) & 0xFFFF_FFFF_FFFF_FFF8;
        const buffer = ui.allocator.alloc(u8, block_count) catch return;
        const slice = std.fmt.bufPrint(buffer, fmt, args) catch return;

        const handle = ui.new() catch |err| {
            log.err("text {}", .{err});
            return;
        };

        const object = ui.get(handle) catch return;

        object.* = .{
            .ident = ident,
            .active = true,
            .shown = true,
            .data = .{
                .text = .{
                    .memory = buffer,
                    .text = slice,
                    .allocated = true,
                },
            },
        };

        ui.add_child_last(parent, handle);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn draw(self: Text, obj: *const Object) void {
    ng.ui.draw_text(
        obj.pos,
        self.text,
        20,
        .yellow,
    );
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn layout(self: *const Text, _: Handle, _: LayoutConstraint) ng.Vec2 {
    return ng.Vec2{ @as(f32, @floatFromInt(self.text.len)) * 12, 20 };
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn process_event(_: *Text, _: Handle, _: ng.Event) bool {
    return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
