///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const std = @import("std");
const ng = @import("ng");

const ui = ng.ui;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const Button = @This();

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

min_size: ng.Vec2,
background_color: ng.Color = .@"dark grey",
pressed_color: ng.Color = .grey,
clicked: usize = 0,
pressed: bool = false,

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const Object = ui.Object;
const Handle = ui.Handle;
const Padding = ui.Padding;
const LayoutConstraint = ui.LayoutConstraint;
const Ident = ui.Ident;

const log = ui.log;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const AddButtonOptions = struct {
    unique: usize = 0,
    text: []const u8,
    width: f32 = 100,
    height: f32 = 40,
    padding: Padding = .{},
};

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub noinline fn add_button(
    options: AddButtonOptions,
) ?usize {
    const ident = Ident{ .addr = @returnAddress(), .unique = options.unique };

    const clicked = begin_button_internal(.{
        .unique = options.unique,
        .width = options.width,
        .height = options.height,
    }, ident);

    ng.ui_begin_hbox(.{ .padding = .{
        .left = options.padding.left,
        .top = options.padding.top,
        .right = options.padding.right,
        .bottom = options.padding.bottom,
    } });
    ng.ui_add_text(.{}, "{s}", .{options.text});
    ng.ui_end_hbox();

    end_button();

    return clicked;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const ButtonOptions = struct {
    unique: usize = 0,
    width: f32 = 100,
    height: f32 = 40,
};

pub noinline fn begin_button(
    options: ButtonOptions,
) ?usize {
    const ident = Ident{ .addr = @returnAddress(), .unique = options.unique };

    return begin_button_internal(options, ident);
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

fn begin_button_internal(options: ButtonOptions, ident: Ident) ?usize {
    const parent = ui.top_build_stack();

    if (ui.find_object(parent, ident)) |handle| {
        var object = ui.get(handle) catch return null;
        object.active = true;

        ui.move_child_last(parent, handle);
        ui.push_build_stack(handle);

        if (object.data.button.clicked > 0) {
            const clicked = object.data.button.clicked;
            object.data.button.clicked = 0;
            return clicked;
        } else {
            return null;
        }
    } else {
        const handle = ui.new() catch |err| {
            log.err("button {}", .{err});
            return null;
        };

        const object = ui.get(handle) catch return null;

        object.* = .{
            .ident = ident,
            .active = true,
            .data = .{
                .button = .{
                    .min_size = .{ options.width, options.height },
                },
            },
        };

        ui.add_child_last(parent, handle);
        ui.push_build_stack(handle);
    }

    return null;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub noinline fn end_button() void {
    ui.pop_build_stack();
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn deinit(_: *Button) void {}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn process_event(self: *Button, handle: Handle, event: ng.Event) bool {
    switch (event) {
        .mouse_down => |ev| return self.process_mouse_down(handle, ev),
        .mouse_double_click => |ev| return self.process_mouse_down(handle, ev),
        .mouse_up => |ev| return self.process_mouse_up(handle, ev),
        else => {},
    }
    return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

fn process_mouse_down(self: *Button, handle: Handle, event: ng.MouseEvent) bool {
    if (event.button == .left) {
        self.clicked += 1;
        self.pressed = true;
        ui.captured_mouse = handle;
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

fn process_mouse_up(self: *Button, _: Handle, event: ng.MouseEvent) bool {
    if (event.button == .left) {
        self.pressed = false;
        ui.captured_mouse = null;
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn draw(self: Button, obj: *const Object) void {
    if (self.pressed) {
        ui.draw_rectangle(obj.pos, obj.size, self.pressed_color);
    } else {
        ui.draw_rectangle(obj.pos, obj.size, self.background_color);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn layout(self: *const Button, handle: Handle, constraint: LayoutConstraint) ng.Vec2 {
    const obj = ui.get(handle) catch return .{ 0, 0 };

    const internal_constraint = LayoutConstraint{
        .min_size = @min(self.min_size, constraint.min_size),
        .max_size = @max(self.min_size, constraint.max_size),
    };

    var size: ng.Vec2 = .{ 0, 0 };

    var iter = handle.children() catch return .{ 0, 0 };
    while (iter.next()) |child_handle| {
        var child_obj = ui.get(child_handle) catch return obj.size;

        child_obj.pos = obj.pos;

        const child_size = child_handle.layout(internal_constraint);

        child_obj.size = child_size;

        size = @max(child_size, size);
    }

    return size;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
