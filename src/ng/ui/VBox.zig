///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const std = @import("std");
const ng = @import("ng");

const ui = ng.ui;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const VBox = @This();

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const Object = ui.Object;
const Handle = ui.Handle;
const LayoutConstraint = ui.LayoutConstraint;
const Padding = ui.Padding;

const log = ui.log;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const BeginBoxOptions = struct {
    unique: usize = 0,
    padding: Padding = .{},
};

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub noinline fn begin_vbox(options: BeginBoxOptions) void {
    const ident = ui.Ident{ .addr = @returnAddress(), .unique = options.unique };

    const parent = ui.top_build_stack();

    if (ui.find_object(parent, ident)) |handle| {
        var object = ui.get(handle) catch return;
        object.active = true;
        ui.move_child_last(parent, handle);
        ui.push_build_stack(handle);
    } else {
        const handle = ui.new() catch |err| {
            log.err("begin_box {}", .{err});
            return;
        };

        const object = ui.get(handle) catch return;

        object.* = .{
            .ident = ident,
            .active = true,
            .padding = options.padding,
            .data = .{
                .vbox = .{},
            },
        };

        ui.add_child_last(parent, handle);

        ui.push_build_stack(handle);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub noinline fn end_vbox() void {
    ui.pop_build_stack();
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn deinit(_: *const VBox) void {}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn layout(self: *const VBox, handle: Handle, constraint: LayoutConstraint) ng.Vec2 {
    _ = self;
    const obj = ui.get(handle) catch return .{ 0, 0 };

    var pos = obj.pos + ng.Vec2{ obj.padding.left, obj.padding.top };
    var max_size = ng.Vec2{ 0, 0 };

    var iter = obj.children();
    while (iter.next()) |child| {
        var child_obj = ui.get(child) catch return max_size;

        child_obj.pos = pos;

        const size = child.layout(constraint);
        if (size[0] > max_size[0]) {
            max_size[0] = size[0];
        }

        child_obj.size = size;

        pos[1] += size[1];
        max_size[1] += size[1];
    }

    return max_size;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub fn process_event(_: *VBox, _: Handle, _: ng.Event) bool {
    return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
