///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

const std = @import("std");

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const Vec2 = [2]f32;
pub const Vec3 = [3]f32;
pub const Vec4 = [4]f32;
pub const Mat4 = [16]f32;

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const mat4_identity: Mat4 = [16]f32{
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1,
};

pub fn mat4_translate(x: f32, y: f32, z: f32) Mat4 {
    return .{
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        x, y, z, 1,
    };
}

pub fn mat4_rotate_z(a: f32) Mat4 {
    const cos_angle = @cos(a);
    const sin_angle = @sin(a);
    return .{
        cos_angle, -sin_angle, 0, 0,
        sin_angle, cos_angle,  0, 0,
        0,         0,          1, 0,
        0,         0,          0, 1,
    };
}

pub fn mat4_scale(x: f32, y: f32, z: f32) Mat4 {
    return .{
        x, 0, 0, 0,
        0, y, 0, 0,
        0, 0, z, 0,
        0, 0, 0, 1,
    };
}

pub fn mat4_mul(a: Mat4, b: Mat4) Mat4 {
    var c: Mat4 = undefined;

    c[0] = a[0] * b[0] + a[1] * b[4] + a[2] * b[8] + a[3] * b[12];
    c[1] = a[0] * b[1] + a[1] * b[5] + a[2] * b[9] + a[3] * b[13];
    c[2] = a[0] * b[2] + a[1] * b[6] + a[2] * b[10] + a[3] * b[14];
    c[3] = a[0] * b[3] + a[1] * b[7] + a[2] * b[11] + a[3] * b[15];

    c[4] = a[4] * b[0] + a[5] * b[4] + a[6] * b[8] + a[7] * b[12];
    c[5] = a[4] * b[1] + a[5] * b[5] + a[6] * b[9] + a[7] * b[13];
    c[6] = a[4] * b[2] + a[5] * b[6] + a[6] * b[10] + a[7] * b[14];
    c[7] = a[4] * b[3] + a[5] * b[7] + a[6] * b[11] + a[7] * b[15];

    c[8] = a[8] * b[0] + a[9] * b[4] + a[10] * b[8] + a[11] * b[12];
    c[9] = a[8] * b[1] + a[9] * b[5] + a[10] * b[9] + a[11] * b[13];
    c[10] = a[8] * b[2] + a[9] * b[6] + a[10] * b[10] + a[11] * b[14];
    c[11] = a[8] * b[3] + a[9] * b[7] + a[10] * b[11] + a[11] * b[15];

    c[12] = a[12] * b[0] + a[13] * b[4] + a[14] * b[8] + a[15] * b[12];
    c[13] = a[12] * b[1] + a[13] * b[5] + a[14] * b[9] + a[15] * b[13];
    c[14] = a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14];
    c[15] = a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15];

    return c;
}

pub fn ortho(width: f32, height: f32) Mat4 {
    return .{
        2 / width, 0,          0,  0,
        0,         2 / height, 0,  0,
        0,         0,          -2, 0,
        -1,        -1,         -1, 1,
    };
}

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

pub const Camera2D = struct {
    target: Vec2,
    origin: Vec2,
    rotate: f32,
    zoom: f32,

    pub fn identity() Camera2D {
        return .{
            .target = .{ 0, 0 },
            .origin = .{ 0, 0 },
            .rotate = 0,
            .zoom = 0.5,
        };
    }

    pub fn get_matrix(self: Camera2D) Mat4 {
        const target = mat4_translate(-self.target[0], -self.target[1], 0);
        const rotate = mat4_rotate_z(self.rotate);
        const zoom = mat4_scale(self.zoom, self.zoom, 1);
        const origin = mat4_translate(self.origin[0], self.origin[1], 0);
        return mat4_mul(mat4_mul(mat4_mul(zoom, rotate), origin), target);
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
